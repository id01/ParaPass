Init:
geth --networkid 99455 --nodiscover --maxpeers 0 --datadir ./mychain/ init genesis.json
geth --networkid 99455 --nodiscover --maxpeers 0 --rpc --datadir ./mychain/ account new

Run:
geth --unlock=31eebe079d70ae4ac1dbd5146322a2f371edfa7e --networkid 99455 --nodiscover --maxpeers 0 --rpc --datadir ./mychain/ console

Mine:
> miner.start(1)

Compile to geth:
echo "var ppass=`solc --optimize --combined-json abi,bin,interface PPassNetwork.sol`" > ppass.js

Compile to java:
solc --optimize --abi --bin -o target PPassNetwork.sol
web3j solidity generate target/PPassNetwork.bin target/PPassNetwork.abi -p one.id0.ppass -o <something>

Create new contract:
> web3.eth.defaultAccount = web3.eth.accounts[0];
> loadScript("contract/ppass.js");
> var ppassCreator = web3.eth.contract(JSON.parse(ppass.contracts["PPassNetwork.sol:PPassNetwork"].abi));
> var ppassNetwork = ppassCreator.new({ from: eth.accounts[0], data: "0x" + ppass.contracts["PPassNetwork.sol:PPassNetwork"].bin, gas: 5000000},
	function (e, contract) {
		console.log(e, contract);
		if (typeof contract.address !== 'undefined') {
			console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
		}
	}
);

Retrieve contract:
> web3.eth.defaultAccount = web3.eth.accounts[0];
> loadScript("contract/ppass.js");
> var ppassCreator = web3.eth.contract(JSON.parse(ppass.contracts["PPassNetwork.sol:PPassNetwork"].abi));
> var ppassNetwork = ppassCreator.at('0x???????');

Run functions:
> ppassNetwork.function(arg1, arg2 ...)

Get password log:
> ppassNetwork.changedPassword({}, { fromBlock: 0, toBlock: 'latest' }).get()

Filter password log:
> ppassNetwork.changedPassword({uid: 1, aid: 1}, { fromBlock: 0, toBlock: 'latest' }).get()